generator lib {
  provider = "prisma-client-js"
  output   = "../../lib/prisma/generated/client"
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Addresses {
  addressId         String              @id @unique
  name              String
  stage             String?
  addressLine1     String?
  addressLine2     String?
  contactForename   String?
  contactSurname    String?
  country           String?
  email             String?
  geoHash           String?
  locality          String?
  phone             String?
  postal_code       String?
  instituteId       String?
  providerId        String?
  institute         Institutes?         @relation(fields: [instituteId], references: [instituteId])
  provider          Providers?          @relation(fields: [providerId], references: [providerId])
  Contacts          Contacts[]
  PlacementListings PlacementListings[]
  Placements        Placements[]
  ProviderCohorts   ProviderCohorts[]
}

model Cohorts {
  cohortId          String              @id @unique
  designatedStaff   String            
  stage             String
  placementType     String
  name              String
  startPlacements   String
  endPlacements     String
  startSubmission   String
  endSubmission     String
  includedFiles     String[]
  includedForms     String[]
  workflow          String
  instituteId       String
  institute         Institutes          @relation(fields: [instituteId], references: [instituteId])
  InstituteStudents InstituteStudents[]
}

model ProviderCohorts {
  cohortId        String    @id @unique
  stage           String
  name            String
  address         Addresses @relation(fields: [addressId], references: [addressId])
  addressId       String
  providerId      String
  provider        Providers @relation(fields: [providerId], references: [providerId])
}

model Contacts {
  contactId              String            @id @unique
  contactForename        String
  contactSurname         String
  created                String
  name                   String
  providerPhone          String
  InstituteStudentUserId String
  addressId              String
  studentUserId          String
  InstitutestudentUser   InstituteStudents @relation(fields: [InstituteStudentUserId], references: [instituteStudentId])
  address                Addresses         @relation(fields: [addressId], references: [addressId])
  studentUser            StudentUsers      @relation(fields: [studentUserId], references: [studentUserId])
}

model InstituteForms {
  formId      String     @id @unique
  form        Json
  updated     String
  instituteId String
  institute   Institutes @relation(fields: [instituteId], references: [instituteId])
}

model Institutes {
  instituteId             String                       @id @unique
  admin                   String
  externalProviderUploads Boolean
  name                    String
  referral                String?
  status                  String
  studentsFields          String[]
  staff                   Int
  staffActive             Int
  students                Int
  studentsActive          Int
  staffFields             String[]
  staffGuidance           Json
  studentsGuidance        Json
  verifiedProviders       String[]
  Addresses               Addresses[]
  Cohorts                 Cohorts[]
  Forms                   InstituteForms[]
  InstituteStaff          InstituteStaff[]
  StaffUserGroups         InstituteStaffUserGroups[]
  StudentUserGroups       InstituteStudentUserGroups[]
  InstituteStudents       InstituteStudents[]
  Placements              Placements[]
}

model Logs {
  logId       String     @id @unique
  provider    Json
  students    Json
  staff       Json
  uid         String
  placementId String
  placement   Placements @relation(fields: [placementId], references: [placementId])
}

model PlacementListings {
  placementListingId String    @id @unique
  addressId          String
  contactForename    String
  contactSurname     String
  created            DateTime
  mapConsent         Boolean
  mapConsentDate     String
  providerEmail      String
  providerId         String
  providerPhone      String
  savedBy            Json
  questions          Json
  title              String
  uploadedBy         String
  address            Addresses @relation(fields: [addressId], references: [addressId])
  provider           Providers @relation(fields: [providerId], references: [providerId])
}

model Placements {
  placementId        String                     @id @unique
  activeDates        String[]
  cohortId           String
  contactForename    String
  contactSurname     String
  created            String
  draft              Boolean
  endDate            String
  flags              String[]
  geoHash            String
  inProgress         Boolean
  leadTimes          String[]
  name               String
  parentEmailed      DateTime?
  parentExpiry       String?
  parentKey          String?
  product            String?
  providerEmail      String?
  providerEmailed    DateTime?
  providerExpiry     String?
  providerKey        String?
  providerName       String?
  providerPhone      String
  nextStatus         Int?
  status             Int
  startDate          String
  title              String
  forms              Json
  questions          Json
  uploadedBy         String
  addressId          String
  instituteId        String
  instituteStudentId String
  providerId         String
  studentId          String
  userGroupId        String
  Logs               Logs[]
  address            Addresses                  @relation(fields: [addressId], references: [addressId])
  institute          Institutes                 @relation(fields: [instituteId], references: [instituteId])
  instituteStudent   InstituteStudents          @relation(fields: [instituteStudentId], references: [instituteStudentId])
  provider           Providers                  @relation(fields: [providerId], references: [providerId])
  student            StudentUsers               @relation(fields: [studentId], references: [studentUserId])
  userGroup          InstituteStudentUserGroups @relation(fields: [userGroupId], references: [userGroupId])
}

model Providers {
  providerId          String               @id @unique
  contactForename     String
  contactSurname      String
  email               String
  mapConsent          Boolean?
  insurance           Boolean?
  mapConsentDate      String?
  name                String
  phone               String
  rememberConsent     Boolean?
  rememberConsentDate String?
  savedBy             Json?
  sector              String
  referral            String?
  subsector           String
  uploadedBy          String
  website             String?
  activationCode      Int     @default(0)
  status              String 
  Addresses           Addresses[]
  PlacementListings   PlacementListings[]
  Placements          Placements[]
  ProviderStaff       ProviderStaff[]
  ProviderUserGroups  ProviderUserGroups[]
  ProviderCohorts     ProviderCohorts[]
}

model InstituteStudentUserGroups {
  userGroupId       String              @id @unique
  default           Boolean
  name              String
  updated           String
  instituteId       String
  institute         Institutes          @relation(fields: [instituteId], references: [instituteId])
  InstituteStudents InstituteStudents[]
  Placements        Placements[]
}

model InstituteStaffUserGroups {
  userGroupId    String           @id @unique
  default        Boolean
  name           String
  updated        String
  instituteId    String
  InstituteStaff InstituteStaff[]
  institute      Institutes       @relation(fields: [instituteId], references: [instituteId])
}

model ProviderUserGroups {
  userGroupId   String          @id @unique
  default       Boolean
  name          String
  updated       String
  providerId    String
  ProviderStaff ProviderStaff[]
  provider      Providers       @relation(fields: [providerId], references: [providerId])
}

model StudentUsers {
  studentUserId String       @unique
  status        String
  analytics     Json
  created       String
  details       Json
  email         String
  referral      String
  units         String
  userType      String
  Contacts      Contacts[]
  Placements    Placements[]
}

model InstituteStaff {
  instituteStaffId String                   @unique
  created          String
  details          Json
  email            String
  oId              String
  status           String
  userType         String
  instituteId      String
  userGroupId      String
  institute        Institutes               @relation(fields: [instituteId], references: [instituteId])
  userGroup        InstituteStaffUserGroups @relation(fields: [userGroupId], references: [userGroupId])
}

model InstituteStudents {
  instituteStudentId String                     @unique
  activated          String
  created            String
  cohortId           String
  details            Json
  email              String
  flags              String[]
  oId                String
  resetExpiry        DateTime
  status             String
  userType           String
  instituteId        String
  userGroupId        String
  Contacts           Contacts[]
  cohort             Cohorts                    @relation(fields: [cohortId], references: [cohortId])
  institute          Institutes                 @relation(fields: [instituteId], references: [instituteId])
  userGroup          InstituteStudentUserGroups @relation(fields: [userGroupId], references: [userGroupId])
  Placements         Placements[]
}

model ProviderStaff {
  providerStaffId String             @unique
  created         String
  details         Json
  email           String
  notes           Json?
  status          String
  providerId      String
  userGroupId     String
  provider        Providers          @relation(fields: [providerId], references: [providerId])
  userGroup       ProviderUserGroups @relation(fields: [userGroupId], references: [userGroupId])
}
